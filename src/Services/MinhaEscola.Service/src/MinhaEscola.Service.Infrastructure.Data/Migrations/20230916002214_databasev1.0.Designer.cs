// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinhaEscola.Service.Infrastructure.Data.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MinhaEscola.Service.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230916002214_databasev1.0")]
    partial class databasev10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Address.Limits.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cep");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("street");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int4")
                        .HasColumnName("zone_id");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("address", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Address.Limits.Zone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("zone", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Affiliation.Limits.Affiliation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("PhysicalPersonId")
                        .HasColumnType("int4")
                        .HasColumnName("person_id");

                    b.Property<int>("RelatedId")
                        .HasColumnType("int4")
                        .HasColumnName("releated_id");

                    b.Property<int>("TypeAffiliationId")
                        .HasColumnType("int4")
                        .HasColumnName("type_affiliation_id");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalPersonId");

                    b.HasIndex("TypeAffiliationId");

                    b.ToTable("affiliation", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Affiliation.Limits.TypeAffiliation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("type_affiliation", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.CategoryAdministractive.Limits.CategoryAdministractive", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("category_school_privated", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Class.Limits.Class", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("AmountStudent")
                        .HasColumnType("int4")
                        .HasColumnName("quantity_student");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int4")
                        .HasColumnName("component_id");

                    b.Property<string>("Denomination")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("denomination");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int4")
                        .HasColumnName("school_id");

                    b.Property<short>("Year")
                        .HasColumnType("int2")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("class", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Color.Limits.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("color", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Component.Limits.Component", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Denomination")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("denomination");

                    b.Property<long>("ModalityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<long>("StageId")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeOrganization")
                        .HasColumnType("int2")
                        .HasColumnName("type_organization");

                    b.HasKey("Id");

                    b.ToTable("component", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.DependencyAdministractive.Limits.DependencyAdministractive", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("dependency_administractive", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Discipline.Limits.Discipline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("discipline", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Documentation.Limits.Documentation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AttachmentId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("file_id");

                    b.Property<bool>("DocumentationValid")
                        .HasColumnType("boolean")
                        .HasColumnName("valid");

                    b.Property<int>("PhysicalPersonId")
                        .HasColumnType("int4")
                        .HasColumnName("person_id");

                    b.Property<int>("TypeDocumentationId")
                        .HasColumnType("int4")
                        .HasColumnName("type_documentation_id");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalPersonId");

                    b.HasIndex("TypeDocumentationId");

                    b.ToTable("documentation", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Documentation.Limits.TypeDocumentation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("type_documentation", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.KnowledgeArea.Limits.KnowledgeArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("knowledge_area", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.LocationOperation.Limits.LocationOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("location_operation", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Nationality.Limits.Nationality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("nationality", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.PhysicalPerson.Limits.PhysicalPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int4")
                        .HasColumnName("address_id");

                    b.Property<int>("ColorId")
                        .HasColumnType("int4")
                        .HasColumnName("color_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int4")
                        .HasColumnName("nationality_id");

                    b.Property<string>("RegisterGeneral")
                        .HasColumnType("char(10)")
                        .HasColumnName("rg");

                    b.Property<string>("RegisterOfPhysicalPerson")
                        .HasColumnType("char(11)")
                        .HasColumnName("cpf");

                    b.Property<int>("SexId")
                        .HasColumnType("int4")
                        .HasColumnName("sex_id");

                    b.Property<int>("Year")
                        .HasColumnType("int4")
                        .HasColumnName("years");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ColorId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("SexId");

                    b.ToTable("physical_person", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.PublicAgency.Limits.PublicAgency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("public_agency", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.School.Limits.DisciplineComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("int4")
                        .HasColumnName("component_id");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int4")
                        .HasColumnName("discipline_id");

                    b.Property<int>("KnowledgeAreaId")
                        .HasColumnType("int4")
                        .HasColumnName("knowledgearea_id");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int4")
                        .HasColumnName("school_id");

                    b.Property<int>("WorkloadId")
                        .HasColumnType("int4")
                        .HasColumnName("workload_id");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("discipline_component", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.School.Limits.School", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int4")
                        .HasColumnName("address_id");

                    b.Property<int>("AgencyPublicId")
                        .HasColumnType("int4")
                        .HasColumnName("public_agency_id");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cnpj");

                    b.Property<int>("CategorySchoolPrivatedId")
                        .HasColumnType("int4")
                        .HasColumnName("category_school_privated_id");

                    b.Property<int>("DependencyAdministrativeId")
                        .HasColumnType("int4")
                        .HasColumnName("dependency_administractive_id");

                    b.Property<int>("LocationOfOperationId")
                        .HasColumnType("int4")
                        .HasColumnName("location_operation_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("NameAbbreviated")
                        .IsRequired()
                        .HasColumnType("varchar(70)")
                        .HasColumnName("name_abbreviated");

                    b.Property<int>("SituationOfOperationId")
                        .HasColumnType("int4")
                        .HasColumnName("situation_operation_id");

                    b.Property<int>("_status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgencyPublicId");

                    b.HasIndex("CategorySchoolPrivatedId");

                    b.HasIndex("DependencyAdministrativeId");

                    b.HasIndex("LocationOfOperationId");

                    b.HasIndex("SituationOfOperationId");

                    b.ToTable("school", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.School.Limits.SchoolComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("int4")
                        .HasColumnName("component_id");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int4")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("school_component", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Sex.Limits.Sex", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("sex", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.SituationOperation.Limits.SituationOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("situation_operation", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Student.Limits.Enrollment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateEnrollee")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Year")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Student.Limits.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("INEP")
                        .HasColumnType("bigint")
                        .HasColumnName("inep");

                    b.Property<long>("PhysicalPersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("person_id");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint")
                        .HasColumnName("school_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<bool>("UseTransport")
                        .HasColumnType("boolean")
                        .HasColumnName("use_transport");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalPersonId");

                    b.HasIndex("SchoolId");

                    b.ToTable("student", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.WorkLoad.Limits.WorkLoad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AnnualClass")
                        .HasColumnType("int4")
                        .HasColumnName("annual_class");

                    b.Property<int>("WeekHours")
                        .HasColumnType("int4")
                        .HasColumnName("week_hours");

                    b.Property<int>("WeeklyClass")
                        .HasColumnType("int4")
                        .HasColumnName("weekly_class");

                    b.HasKey("Id");

                    b.ToTable("work_load", "public");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Address.Limits.Address", b =>
                {
                    b.HasOne("MinhaEscola.Service.Domain.Entities.Address.Limits.Zone", "Zone")
                        .WithMany("Addresses")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Affiliation.Limits.Affiliation", b =>
                {
                    b.HasOne("MinhaEscola.Service.Domain.Entities.PhysicalPerson.Limits.PhysicalPerson", null)
                        .WithMany("Affiliations")
                        .HasForeignKey("PhysicalPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.Affiliation.Limits.TypeAffiliation", "TypeAffiliation")
                        .WithMany("Affiliations")
                        .HasForeignKey("TypeAffiliationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeAffiliation");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Class.Limits.Class", b =>
                {
                    b.HasOne("MinhaEscola.Service.Domain.Entities.Component.Limits.Component", "Component")
                        .WithMany("Classes")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.School.Limits.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("School");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Documentation.Limits.Documentation", b =>
                {
                    b.HasOne("MinhaEscola.Service.Domain.Entities.PhysicalPerson.Limits.PhysicalPerson", "PhysicalPerson")
                        .WithMany("Documentations")
                        .HasForeignKey("PhysicalPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.Documentation.Limits.TypeDocumentation", "TypeDocumentation")
                        .WithMany("Documentations")
                        .HasForeignKey("TypeDocumentationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhysicalPerson");

                    b.Navigation("TypeDocumentation");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.PhysicalPerson.Limits.PhysicalPerson", b =>
                {
                    b.HasOne("MinhaEscola.Service.Domain.Entities.Address.Limits.Address", "Address")
                        .WithMany("PhysicalPersons")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.Color.Limits.Color", "Color")
                        .WithMany("PhysicalPersons")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.Nationality.Limits.Nationality", "Nationality")
                        .WithMany("PhysicalPersons")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.Sex.Limits.Sex", "Sex")
                        .WithMany("PhysicalPersons")
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Color");

                    b.Navigation("Nationality");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.School.Limits.DisciplineComponent", b =>
                {
                    b.HasOne("MinhaEscola.Service.Domain.Entities.Component.Limits.Component", "Component")
                        .WithMany("DisciplineComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.Discipline.Limits.Discipline", "Discipline")
                        .WithMany("DisciplineComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.KnowledgeArea.Limits.KnowledgeArea", "KnowledgeArea")
                        .WithMany("DisciplineComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.WorkLoad.Limits.WorkLoad", "WorkLoad")
                        .WithMany("DisciplineComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.School.Limits.School", "School")
                        .WithMany("DisciplineComponents")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Discipline");

                    b.Navigation("KnowledgeArea");

                    b.Navigation("School");

                    b.Navigation("WorkLoad");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.School.Limits.School", b =>
                {
                    b.HasOne("MinhaEscola.Service.Domain.Entities.Address.Limits.Address", "Address")
                        .WithMany("Schools")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.PublicAgency.Limits.PublicAgency", "PublicAgency")
                        .WithMany("Schools")
                        .HasForeignKey("AgencyPublicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.CategoryAdministractive.Limits.CategoryAdministractive", "CategoryAdministractive")
                        .WithMany("Schools")
                        .HasForeignKey("CategorySchoolPrivatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.DependencyAdministractive.Limits.DependencyAdministractive", "DependencyAdministractive")
                        .WithMany("Schools")
                        .HasForeignKey("DependencyAdministrativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.LocationOperation.Limits.LocationOperation", "LocationOperation")
                        .WithMany("Schools")
                        .HasForeignKey("LocationOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.SituationOperation.Limits.SituationOperation", "SituationOperation")
                        .WithMany("Schools")
                        .HasForeignKey("SituationOfOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CategoryAdministractive");

                    b.Navigation("DependencyAdministractive");

                    b.Navigation("LocationOperation");

                    b.Navigation("PublicAgency");

                    b.Navigation("SituationOperation");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.School.Limits.SchoolComponent", b =>
                {
                    b.HasOne("MinhaEscola.Service.Domain.Entities.Component.Limits.Component", "Component")
                        .WithMany("SchoolComponent")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.School.Limits.School", "School")
                        .WithMany("SchoolComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("School");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Student.Limits.Enrollment", b =>
                {
                    b.HasOne("MinhaEscola.Service.Domain.Entities.Class.Limits.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.Student.Limits.Student", "Student")
                        .WithMany("Enrollment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Student.Limits.Student", b =>
                {
                    b.HasOne("MinhaEscola.Service.Domain.Entities.PhysicalPerson.Limits.PhysicalPerson", "PhysicalPerson")
                        .WithMany("Students")
                        .HasForeignKey("PhysicalPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaEscola.Service.Domain.Entities.School.Limits.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhysicalPerson");

                    b.Navigation("School");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Address.Limits.Address", b =>
                {
                    b.Navigation("PhysicalPersons");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Address.Limits.Zone", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Affiliation.Limits.TypeAffiliation", b =>
                {
                    b.Navigation("Affiliations");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.CategoryAdministractive.Limits.CategoryAdministractive", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Color.Limits.Color", b =>
                {
                    b.Navigation("PhysicalPersons");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Component.Limits.Component", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("DisciplineComponents");

                    b.Navigation("SchoolComponent");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.DependencyAdministractive.Limits.DependencyAdministractive", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Discipline.Limits.Discipline", b =>
                {
                    b.Navigation("DisciplineComponents");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Documentation.Limits.TypeDocumentation", b =>
                {
                    b.Navigation("Documentations");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.KnowledgeArea.Limits.KnowledgeArea", b =>
                {
                    b.Navigation("DisciplineComponents");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.LocationOperation.Limits.LocationOperation", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Nationality.Limits.Nationality", b =>
                {
                    b.Navigation("PhysicalPersons");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.PhysicalPerson.Limits.PhysicalPerson", b =>
                {
                    b.Navigation("Affiliations");

                    b.Navigation("Documentations");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.PublicAgency.Limits.PublicAgency", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.School.Limits.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("DisciplineComponents");

                    b.Navigation("SchoolComponents");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Sex.Limits.Sex", b =>
                {
                    b.Navigation("PhysicalPersons");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.SituationOperation.Limits.SituationOperation", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.Student.Limits.Student", b =>
                {
                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("MinhaEscola.Service.Domain.Entities.WorkLoad.Limits.WorkLoad", b =>
                {
                    b.Navigation("DisciplineComponents");
                });
#pragma warning restore 612, 618
        }
    }
}
